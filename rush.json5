/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  $schema: "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  
  /**
   * (Required) This specifies the version of the Rush engine to be used in this repo.
   * Rush's "version selector" feature ensures that the globally installed tool will
   * behave like this release, regardless of which version is installed globally.
   *
   * The common/scripts/install-run-rush.js automation script also uses this version.
   *
   * NOTE: If you upgrade to a new major version of Rush, you should replace the "v5"
   * path segment in the "$schema" field for all your Rush config files.  This will ensure
   * correct error-underlining and tab-completion for editors such as VS Code.
   */
  rushVersion: "5.6.1",
  
  /**
   * The next field selects which package manager should be installed and determines its version.
   * Rush installs its own local copy of the package manager to ensure that your build process
   * is fully isolated from whatever tools are present in the local environment.
   *
   * Specify one of: "pnpmVersion", "npmVersion", or "yarnVersion".  See the Rush documentation
   * for details about these alternatives.
   */
  pnpmVersion: "2.25.7",
  
  // npmVersion: "4.5.0",
  // yarnVersion: "1.9.4",

  /**
   * Options that are only used when the PNPM package manager is selected
   */
  pnpmOptions: {
  
    /**
     * If true, then Rush will add the "--strict-peer-dependencies" option when invoking PNPM.
     * This causes "rush install" to fail if there are unsatisfied peer dependencies, which is
     * an invalid state that can cause build failures or incompatible dependency versions.
     * (For historical reasons, JavaScript package managers generally do not treat this invalid
     * state as an error.)
     *
     * The default value is false to avoid legacy compatibility issues.
     * It is strongly recommended to set strictPeerDependencies=true.
     */  
    strictPeerDependencies: true
  },
  
  /**
   * Older releases of the NodeJS engine may be missing features required by your system.
   * Other releases may have bugs.  In particular, the "latest" version will not be a
   * Long Term Support (LTS) version and is likely to have regressions.
   *
   * Specify a SemVer range to ensure developers use a NodeJS version that is appropriate
   * for your repo.
   */
  nodeSupportedVersionRange: ">=8.9.4 <9.0.0 || >=10.13.0 <11.0.0",

  /**
   * If you would like the version specifiers for your dependencies to be consistent, then
   * uncomment this line. Note this is effectively like running "rush check" before the following:
   *   rush install, rush update, rush link, rush version, rush publish
   * In some cases you may want this turned on, but need to allow some packages to use a different
   * version. In those cases, you will need to add an entry to the "allowedAlternativeVersions"
   * section of the common-versions.json.
   */
  ensureConsistentVersions: true,

  /**
   * Large monorepos can become intimidating for newcomers if project folder paths don't follow
   * a consistent and recognizable pattern.  When the system allows nested folder trees,
   * we've found that teams will often use subfolders to create islands that isolate
   * their work from others ("shipping the org").  This hinders collaboration and code sharing.
   *
   * The Rush developers recommend a "category folder" model, where buildable project folders
   * must always be exactly two levels below the repo root.  The parent folder acts as the category.
   * This provides a basic facility for grouping related projects (e.g. "apps", "libaries",
   * "tools", "prototypes") while still encouraging teams to organize their projects into
   * a unified taxonomy.  Limiting to 2 levels seems very restrictive at first, but if you have
   * 20 categories and 20 projects in each category, this scheme can easily accommodate hundreds
   * of projects.  In practice, you will find that the folder hierarchy needs to be rebalanced
   * occasionally, but if that's painful, it's a warning sign that your development style may
   * discourage refactoring.  Reorganizing the categories should be an enlightening discussion
   * that brings people together, and maybe also identifies poor coding practices (e.g. file
   * references that reach into other project's folders without using NodeJS module resolution).
   *
   * The defaults are projectFolderMinDepth=2 and projectFolderMaxDepth=2.
   *
   * To remove these restrictions, you could set projectFolderMinDepth=1
   * and set projectFolderMaxDepth to a large number.
   */  
  projectFolderMinDepth: 2,
  projectFolderMaxDepth: 2,

  /**
   * This feature helps you to review and approve new packages before they are introduced
   * to your monorepo.  For example, you may be concerned about licensing, code quality,
   * performance, or simply accumulating too many libraries with overlapping functionality.
   * The approvals are tracked in two config files "browser-approved-packages.json"
   * and "nonbrowser-approved-packages.json".  See the Rush documentation for details.
   */
  approvedPackagesPolicy: {
     /**
      * The review categories allow you to say for example "This library is approved for usage
      * in prototypes, but not in production code."
      *
      * Each project can be associated with one review category, by assigning the "reviewCategory" field
      * in the "projects" section of rush.json.  The approval is then recorded in the files
      * "common/config/rush/browser-approved-packages.json" and "nonbrowser-approved-packages.json"
      * which are automatically generated during "rush update".
      *
      * Designate categories with whatever granularity is appropriate for your review process,
      * or you could just have a single category called "default".
      */  
    reviewCategories: [
      "libraries",  // library projects that ship
      "tests"       // non-shipping test projects
    ],
    ignoredNpmScopes: [
      "@types"
    ]
  },

  /**
   * If you use Git as your version control system, this section has some additional
   * optional features you can use.
   */
  gitPolicy: {
    /**
     * Work at a big company?  Tired of finding Git commits at work with unprofessional Git
     * emails such as "beer-lover@my-college.edu"?  Rush can validate people's Git email address
     * before they get started.
     *
     * Define a list of regular expressions describing allowable e-mail patterns for Git commits.
     * They are case-insensitive anchored JavaScript RegExps.  Example: ".*@example\.com"
     *
     * IMPORTANT: Because these are regular expressions encoded as JSON string literals,
     * RegExp escapes need two backspashes, and ordinary periods should be "\\.".
     */
    // "allowedEmailRegExps": [
    //  "[^@]+@users\\.noreply\\.github\\.com",
    //  "travis@example\\.org"
    // ],
    allowedEmailRegExps: [
      "[^@]+@users\\.noreply\\.github\\.com",
      "travis@example\\.org"
    ],
    
    /**
     * When Rush reports that the address is malformed, the notice can include an example
     * of a recommended email.  Make sure it conforms to one of the allowedEmailRegExps
     * expressions.
     */
    sampleEmail: "mrexample@users.noreply.github.com"
  },
  
  repository: {
    /**
     * The URL of this Git repository, used by "rush change" to determine the base branch for your PR.
     *
     * The "rush change" command needs to determine which files are affected by your PR diff.
     * If you merged or cherry-picked commits from the master branch into your PR branch, those commits
     * should be excluded from this diff (since they belong to some other PR).  In order to do that,
     * Rush needs to know where to find the base branch for your PR.  This information cannot be
     * determined from Git alone, since the "pull request" feature is not a Git concept.  Ideally
     * Rush would use a vendor-specific protocol to query the information from GitHub, Azure DevOps, etc.
     * But to keep things simple, "rush change" simply assumes that your PR is against the "master" branch
     * of the Git remote indicated by the respository.url setting in rush.json.  If you are working in
     * a GitHub "fork" of the real repo, this setting will be different from the repository URL of your
     * your PR branch, and in this situation "rush change" will also automatically invoke "git fetch"
     * to retrieve the latest activity for the remote master branch.
     */
    url: "https://github.com/Microsoft/web-build-tools.git"
  },

  /**
   * Event hooks are customized script actions that Rush executes when specific events occur
   */
  eventHooks: {
    preRushInstall: [],
    postRushInstall: [],
    preRushBuild: [],
    postRushBuild: []
  },
  projects: [
    {
      packageName: "@microsoft/api-extractor",
      projectFolder: "apps/api-extractor",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/api-extractor-model",
      projectFolder: "apps/api-extractor-model",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/api-documenter",
      projectFolder: "apps/api-documenter",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/rush",
      projectFolder: "apps/rush",
      reviewCategory: "libraries",
      versionPolicyName: "rush"
    },
    {
      packageName: "@microsoft/rush-lib",
      projectFolder: "apps/rush-lib",
      reviewCategory: "libraries",
      versionPolicyName: "rush"
    },
    {
      packageName: "api-documenter-test",
      projectFolder: "build-tests/api-documenter-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-lib1-test",
      projectFolder: "build-tests/api-extractor-lib1-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-lib2-test",
      projectFolder: "build-tests/api-extractor-lib2-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-lib3-test",
      projectFolder: "build-tests/api-extractor-lib3-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-scenarios",
      projectFolder: "build-tests/api-extractor-scenarios",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-test-01",
      projectFolder: "build-tests/api-extractor-test-01",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-test-02",
      projectFolder: "build-tests/api-extractor-test-02",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-test-03",
      projectFolder: "build-tests/api-extractor-test-03",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "api-extractor-test-04",
      projectFolder: "build-tests/api-extractor-test-04",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "node-library-build-test",
      projectFolder: "build-tests/node-library-build-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-compiler-2.4-library-test",
      projectFolder: "build-tests/rush-stack-compiler-2.4-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-compiler-2.7-library-test",
      projectFolder: "build-tests/rush-stack-compiler-2.7-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-compiler-2.9-library-test",
      projectFolder: "build-tests/rush-stack-compiler-2.9-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-compiler-3.0-library-test",
      projectFolder: "build-tests/rush-stack-compiler-3.0-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-compiler-3.1-library-test",
      projectFolder: "build-tests/rush-stack-compiler-3.1-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-compiler-3.2-library-test",
      projectFolder: "build-tests/rush-stack-compiler-3.2-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-compiler-3.3-library-test",
      projectFolder: "build-tests/rush-stack-compiler-3.3-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "rush-stack-library-test",
      projectFolder: "build-tests/rush-stack-library-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "web-library-build-test",
      projectFolder: "build-tests/web-library-build-test",
      reviewCategory: "tests",
      shouldPublish: false
    },
    {
      packageName: "@microsoft/gulp-core-build",
      projectFolder: "core-build/gulp-core-build",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build"
      ]
    },
    {
      packageName: "@microsoft/gulp-core-build-mocha",
      projectFolder: "core-build/gulp-core-build-mocha",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build"
      ]
    },
    {
      packageName: "@microsoft/gulp-core-build-sass",
      projectFolder: "core-build/gulp-core-build-sass",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/gulp-core-build-serve",
      projectFolder: "core-build/gulp-core-build-serve",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/gulp-core-build-typescript",
      projectFolder: "core-build/gulp-core-build-typescript",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build"
      ]
    },
    {
      packageName: "@microsoft/gulp-core-build-webpack",
      projectFolder: "core-build/gulp-core-build-webpack",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/node-library-build",
      projectFolder: "core-build/node-library-build",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/web-library-build",
      projectFolder: "core-build/web-library-build",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/load-themed-styles",
      projectFolder: "libraries/load-themed-styles",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/node-core-library",
      projectFolder: "libraries/node-core-library",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/package-deps-hash",
      projectFolder: "libraries/package-deps-hash",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/rushell",
      projectFolder: "libraries/rushell",
      reviewCategory: "libraries",
      shouldPublish: false
    },
    {
      packageName: "@microsoft/stream-collator",
      projectFolder: "libraries/stream-collator",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/ts-command-line",
      projectFolder: "libraries/ts-command-line",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack",
      projectFolder: "stack/rush-stack",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/rush-stack-compiler-2.4",
      projectFolder: "stack/rush-stack-compiler-2.4",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack-compiler-2.7",
      projectFolder: "stack/rush-stack-compiler-2.7",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack-compiler-2.9",
      projectFolder: "stack/rush-stack-compiler-2.9",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack-compiler-3.0",
      projectFolder: "stack/rush-stack-compiler-3.0",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack-compiler-3.1",
      projectFolder: "stack/rush-stack-compiler-3.1",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack-compiler-3.2",
      projectFolder: "stack/rush-stack-compiler-3.2",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack-compiler-3.3",
      projectFolder: "stack/rush-stack-compiler-3.3",
      reviewCategory: "libraries",
      shouldPublish: true,
      cyclicDependencyProjects: [
        "@microsoft/node-library-build",
        "@microsoft/rush-stack-compiler-3.2"
      ]
    },
    {
      packageName: "@microsoft/rush-stack-compiler-shared",
      projectFolder: "stack/rush-stack-compiler-shared",
      reviewCategory: "libraries"
    },
    {
      packageName: "@microsoft/loader-load-themed-styles",
      projectFolder: "webpack/loader-load-themed-styles",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/loader-set-webpack-public-path",
      projectFolder: "webpack/loader-set-webpack-public-path",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/loader-raw-script",
      projectFolder: "webpack/loader-raw-script",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/resolve-chunk-plugin",
      projectFolder: "webpack/resolve-chunk-plugin",
      reviewCategory: "libraries",
      shouldPublish: true
    },
    {
      packageName: "@microsoft/set-webpack-public-path-plugin",
      projectFolder: "webpack/set-webpack-public-path-plugin",
      reviewCategory: "libraries",
      shouldPublish: true
    }
  ]
}
